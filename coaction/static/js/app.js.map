{"version":3,"sources":["app.js","errors/404/error-404-controller.js","js/lists/task-controller.js","js/lists/task.js","js/login/current-user.js","js/login/login-controller.js","js/login/user.js","js/nav/main-nav-controller.js","js/utils/ajax-service.js","js/utils/status-filter.js","js/lists/service/task-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['ngRoute', 'ui.date']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  this.message = 'Could not find: ' + $location.url();\n}]);\n","app.config(['$routeProvider', function($routeProvider){\n  var routeDefinition = {\n    templateUrl: 'static/js/lists/list.html',\n    controller: 'ListCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      tasks: ['tasksService', '$log', function(tasksService, $log) {\n          return tasksService.taskList().then(function(result) {\n            console.log(result);\n            return result.tasks;\n          }).catch(function(err) {\n            $log.log(err + ' -> tasks failed to load');\n          });\n      }],\n      users: ['tasksService', '$log', function(tasksService, $log) {\n          return tasksService.userList().then(function(result) {\n            $log.log(result.users);\n            return result.users;\n          }).catch(function(err) {\n            $log.log(err + ' -> users failed to load');\n          });\n      }],\n    }\n  };\n\n  $routeProvider.when('/lists', routeDefinition);\n\n}]).controller('ListCtrl', ['tasksService', 'tasks', 'users', 'Task', function(tasksService, tasks, users, Task) {\n  var self = this;\n  self.tasks = tasks;\n  self.users = users;\n  self.newTask = Task();\n  self.statusFilter = 'all';\n  self.nullPointer = null;\n\n  self.addTask = function() {\n    if (self.newTask.title === '') {\n      alert('you need to enter a task');\n      return;\n    }\n    tasksService.addTask(self.newTask)\n      .then(function(result) {\n        var addedTask = result.task;\n        self.tasks.push(addedTask);\n        self.newTask = Task();\n      })\n      .catch(function (err) {\n        alert('addTask Failed :(');\n      });\n  };\n\n  self.toggleTask = function(task) {\n    // var oldStatus = task.status;\n    tasksService.toggleTask(task)\n      .then(function(result) {\n        // var toggledTask = result.task;\n        self.tasks[self.tasks.indexOf(task)] = result.task;\n        // alert(toggledTask.title + ' was ' + oldStatus + ', is now ' + toggledTask.status);\n      })\n      .catch(function(err) {\n        alert('status unchanged');\n      });\n  };\n\n  self.deleteTask = function(task) {\n    tasksService.deleteTask(task)\n      .then(function(result) {\n        var deletedTask = result.task;\n        var index = self.tasks.indexOf(task);\n        self.tasks.splice(index, 1);\n      })\n      .catch(function(err) {\n        alert('deletion failed');\n      });\n  };\n\n  self.assignTask = function(task) {\n    tasksService.assignTask(task)\n      .then(function(result) {\n        console.log(result);\n      })\n      .catch(function(err) {\n        console.log(err);\n      });\n  };\n\n  self.toggleDetail = function(task) {\n    if (task.detail) {\n      task.detail = false;\n    } else {\n      task.detail = true;\n    }\n  };\n\n  self.isAssignee = function(user, task) {\n    if (user.email === task.assigned_to) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  self.filterByNew = function() {\n    self.statusFilter = 'new';\n  };\n\n  self.filterByStarted = function() {\n    self.statusFilter = 'started';\n  };\n\n  self.filterByDone = function() {\n    self.statusFilter = 'done';\n  };\n\n  self.filterByAll = function() {\n    self.statusFilter = 'all';\n  };\n\n}]);\n","app.factory('Task', function() {\n  return function(spec) {\n    spec = spec || {};\n    return {\n      title: spec.title || '',\n      status: 'new',\n    };\n  };\n});\n","app.factory('current', ['ajaxService', '$location', '$http', '$log', function(ajaxService, $location, $http, $log) {\n  var self = this;\n  self.user = {};\n\n  ajaxService.call($http.get('/api/me'))\n    .then(function(result) {\n      self.user = result.user;\n      console.log(self.user.id);\n      $location.path('/lists');\n    }).catch(function(err){\n      $location.path('/');\n    });\n\n  self.login = function(user) {\n    $log.log(user);\n    ajaxService.call($http.post('/api/login', user))\n      .then(function(result) {\n        self.user = result.user;\n        $location.path('/lists');\n      });\n  };\n\n  self.logout = function() {\n    ajaxService.call($http.get('/api/logout'))\n      .then(function(result) {\n        $log.log(result);\n        self.user = {};\n        $location.path('/');\n      });\n  };\n\n  self.signup = function(user) {\n    $log.log(user);\n    ajaxService.call($http.post('/api/register', user))\n      .then(function(result) {\n        self.user = result.user;\n        $log.log(result);\n        $location.path('/lists');\n      });\n  };\n\n  return self;\n\n  //TODO: make this a thing\n}]);\n","app.config(['$routeProvider', function($routeProvider){\n  var routeDefinition = {\n    templateUrl: 'static/js/login/login.html',\n    controller: 'LoginCtrl',\n    controllerAs: 'vm',\n  };\n\n  $routeProvider.when('/', routeDefinition);\n\n}]).controller('LoginCtrl', ['$log', '$location', 'current', 'User', function($log, $location, current, User) {\n  var self = this;\n  self.newLogin = User();\n  self.newSignup = User();\n  self.current = current;\n\n  self.userView = 'login';\n\n  self.toggleView = function() {\n    if(self.userView === 'login') {\n      self.userView = 'signup';\n    } else {\n      self.userView = 'login';\n    }\n  };\n\n  self.login = function() {\n    $log.log(self.newLogin);\n    self.current.login(self.newLogin);\n    self.newLogin = User();\n  };\n\n  self.signup = function() {\n    self.current.signup(self.newSignup);\n    self.newSignup = User();\n  };\n}]);\n","app.factory('User', function() {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      name: spec.name,\n      email: spec.email,\n      password: spec.password\n    };\n  };\n});\n","app.controller('MainNavCtrl',\n  ['$log', 'current', '$location', function($log, current, $location) {\n\n    var self = this;\n\n    self.current = current;\n\n  }]);\n","app.factory('ajaxService', ['$log', function($log) {\n\n  return {\n    call: function(p) {\n      return p.then(function (result) {\n        return result.data;\n      })\n      .catch(function (error) {\n        $log.log(error);\n      });\n    }\n  };\n\n}]);\n","app.filter('statusFilter', function() {\n  return function(input, status) {\n\n    var filteredInput = [];\n\n    if (status === 'all') {\n      return input;\n    }\n\n    input.forEach(function(item) {\n      if (item.status === status) {\n        filteredInput.push(item);\n      }\n    });\n\n    return filteredInput;\n  };\n});\n","app.factory('tasksService', ['ajaxService', '$http', function(ajaxService, $http) {\n\n  return {\n\n    addTask: function(task) {\n      return ajaxService.call($http.post('/api/tasks', task));\n    },\n    taskList: function() {\n      return ajaxService.call($http.get('api/tasks'));\n    },\n    userList: function() {\n      return ajaxService.call($http.get('api/users'));\n    },\n    deleteTask: function(task) {\n      var url = '/api/tasks/' + task.id;\n      return ajaxService.call($http.delete(url));\n    },\n    toggleTask: function(task) {\n      var url = '/api/tasks/' + task.id;\n      if (task.status === 'new' || task.status === 'started') {\n        return ajaxService.call($http.put(url, { status: 'done' }));\n      } else {\n        return ajaxService.call($http.put(url, { status: 'started' }));\n      }\n    },\n    assignTask: function(task) {\n      var url = '/api/task_assignment';\n      return ajaxService.call($http.post(url, task));\n    }\n  };\n\n}]);\n"],"sourceRoot":"/source/"}